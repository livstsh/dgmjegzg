const { cmd } = require('../command');
const config = require('../config');
let called = false;
let antiCallEnabled = config.ANTI_CALL === "true"; // Initial value from config

// Activation / d√©sactivation via commande
cmd({
  pattern: "anticall",
  alias: ["callblock", "rejectcall"],
  desc: "Enable or disable auto call reject feature.",
  category: "settings",
  filename: __filename
}, async (conn, m, msg, { text }) => {
  if (!text) return m.reply("*·¥ús·¥á: .·¥Ä…¥·¥õ…™·¥Ñ·¥Ä ü ü ·¥è…¥ | ·¥è“ì“ì*");

  if (text.toLowerCase() === "on") {
    antiCallEnabled = true;
    m.reply("*‚úÖ ·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü ·¥á…¥·¥Ä ô ü·¥á·¥Ö*");
  } else if (text.toLowerCase() === "off") {
    antiCallEnabled = false;
    m.reply("*‚ùå ·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö*");
  } else {
    m.reply("*·¥ús·¥á: .·¥Ä…¥·¥õ…™·¥Ñ·¥Ä ü ü ·¥è…¥ | ·¥è“ì“ì*");
  }
});

// √âv√©nement sur les appels
cmd({ on: "body" }, async (conn, m, msg, { from }) => {
  try {
    if (!called) {
      conn.ev.on('call', async (calls) => {
        if (!antiCallEnabled) return;

        for (const call of calls) {
          if (call.status !== "offer") continue;

          await conn.rejectCall(call.id, call.from);

          if (!call.isGroup) {
            await conn.sendMessage(call.from, {
              text: "*üìµ ·¥ã·¥Ä·¥ç Ä·¥Ä…¥-·¥ç·¥Ö Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ·¥Ä ü ü ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è  Ä·¥á·¥ä·¥á·¥Ñ·¥õ·¥á·¥Ö. ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  ô·¥ús è*",
              mentions: [call.from]
            });
          }
        }
      });

      called = true;
    }
  } catch (err) {
    console.error(err);
    m.reply("‚ùå Error:\n" + err.toString());
  }
});
    
